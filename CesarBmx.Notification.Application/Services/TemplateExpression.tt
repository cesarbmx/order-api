<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51" #>
<#@ assembly name="$(TargetDir)CesarBmx.Shared.Domain.dll" #>
<#@ assembly name="$(TargetDir)CesarBmx.Shared.Common.dll" #>
<#@ assembly name="$(TargetDir)Notification.Domain.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="CesarBmx.Shared.Common.Helpers" #>
<#@ import namespace="CesarBmx.Shared.Common.Extensions" #>
<#@ import namespace="CesarBmx.Shared.Domain.Models" #>
<#@ output extension=".txt" #>
<#@ import namespace="System.Linq" #>
<#
var types = FileHelper.GetTypes(typeof(IEntity),Assembly.LoadFrom(typeof(IEntity).Assembly.CodeBase.Replace("CesarBmx.Shared.Domain.dll","") +  "Notification.Domain.dll"));
foreach (var type in types) {

    if(new[]
{
    //////// Exclude ////////
    "IndicatorDependency"
    //, "b"
    //, "c"
    /////////////////////////
}.Any(c => type.Name.Contains(c))) continue;


////////////////////////////////////////////// Your code //////////////////////////////////////////////
#>
using System.Collections.Generic;
using System.Threading.Tasks;
using AutoMapper;
using CesarBmx.Shared.Application.Exceptions;
using CesarBmx.Shared.Logging.Extensions;
using CesarBmx.Notification.Application.Requests;
using CesarBmx.Notification.Application.Responses;
using CesarBmx.Notification.Domain.Expressions;
using CesarBmx.Notification.Application.Messages;
using CesarBmx.Notification.Domain.Models;
using CesarBmx.Shared.Persistence.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace CesarBmx.Notification.Application.Services
{
    public class <#=type.Name#>Service
    {
        private readonly MainDbContext _mainDbContext;
        private readonly IRepository<<#=type.Name#>> _<#=type.Name.ToReadable()#>Repository;
        private readonly ILogger<<#=type.Name#>Service> _logger;
        private readonly IMapper _mapper;

        public <#=type.Name#>Service(
            MainDbContext mainDbContext,
            IRepository<<#=type.Name#>> <#=type.Name.ToReadable()#>Repository,
            ILogger<<#=type.Name#>Service> logger,
            IMapper mapper)
        {
            _mainDbContext = mainDbContext;
            _<#=type.Name.ToReadable()#>Repository = <#=type.Name.ToReadable()#>Repository;
            _logger = logger;
            _mapper = mapper;
        }

        public async Task<List<<#=type.Name#>Response>> GetAll<#=type.Name#>s()
        {
            // Get all <#=type.Name.ToReadable()#>s
            var user<#=type.Name#>s = await _<#=type.Name.ToReadable()#>Repository.GetAll();

            // Response
            var response = _mapper.Map<List<<#=type.Name#>Response>>(user<#=type.Name#>s);

            // Return
            return response;
        }
        public async Task<<#=type.Name#>Response> Get<#=type.Name#>(string <#=type.Name.ToReadable()#>Id)
        {
            // Get <#=type.Name.ToReadable()#>
            var <#=type.Name.ToReadable()#> = await _<#=type.Name.ToReadable()#>Repository.GetSingle(<#=type.Name.ToReadable()#>Id);

            // Not found
            if (<#=type.Name.ToReadable()#> == null) throw new NotFoundException(<#=type.Name#>Message.<#=type.Name#>NotFound);

            // Response
            var response = _mapper.Map<<#=type.Name#>Response>(<#=type.Name.ToReadable()#>);

            // Return
            return response;
        }
        public async Task<<#=type.Name#>Response> Add<#=type.Name#>(Add<#=type.Name#>Request request)
        {
            // Get <#=type.Name.ToReadable()#>
            var <#=type.Name.ToReadable()#> = await _<#=type.Name.ToReadable()#>Repository.GetSingle(<#=type.Name#>Expression.<#=type.Name#>(request.Name));

            // Throw ConflictException if it exists
            if (<#=type.Name.ToReadable()#> != null) throw new ConflictException(<#=type.Name#>Message.<#=type.Name#>AlreadyExists);

            // Create <#=type.Name.ToReadable()#>
            <#=type.Name.ToReadable()#> = <#=type.Name#>Factory.Create(request);

            // Add
            _<#=type.Name.ToReadable()#>Repository.Add(<#=type.Name.ToReadable()#>);

            // Save
            await _dbContext.SaveChangesAsync();

            // Log into Splunk
            _logger.LogSplunkInformation(request);

            // Response
            var response = _mapper.Map<<#=type.Name#>Response>(<#=type.Name.ToReadable()#>);

            // Return
            return response;
        }
        public async Task<<#=type.Name#>Response> Update<#=type.Name#>(Update<#=type.Name#>Request request)
        {
            // Get <#=type.Name.ToReadable()#>
            var <#=type.Name.ToReadable()#> = await _<#=type.Name.ToReadable()#>Repository.GetSingle(request.<#=type.Name#>Id);

            // Not found
            if (<#=type.Name.ToReadable()#> == null) throw new NotFoundException(<#=type.Name#>Message.<#=type.Name#>NotFound);

            // Update <#=type.Name.ToReadable()#>
            <#=type.Name.ToReadable()#>.Update();

            // Update
            _<#=type.Name.ToReadable()#>Repository.Update(<#=type.Name.ToReadable()#>);

            // Save
            await _dbContext.SaveChangesAsync();

            // Log into Splunk
            _logger.LogSplunkInformation(request);

            // Response
            var response = _mapper.Map<<#=type.Name#>Response>(<#=type.Name.ToReadable()#>);

            // Return
            return response;
        }
        public async Task Remove<#=type.Name#>(string <#=type.Name.ToReadable()#>Id)
        {
            // Get <#=type.Name.ToReadable()#>
            var <#=type.Name.ToReadable()#> = await _<#=type.Name.ToReadable()#>Repository.GetSingle(<#=type.Name.ToReadable()#>Id);

            // Not found
            if (<#=type.Name.ToReadable()#> == null) throw new NotFoundException(<#=type.Name#>Message.<#=type.Name#>NotFound);

            // Remove <#=type.Name.ToReadable()#>
            _<#=type.Name.ToReadable()#>Repository.Remove(<#=type.Name.ToReadable()#>);
        }
    }
}

<#
///////////////////////////////////////////////////////////////////////////////////////////////////////


SaveOutput(type.Name + "Service.cs");
}
#>
<#+
private void SaveOutput(string outputFileName) {
var templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
if (templateDirectory == null) return;
var outputFilePath = Path.Combine(templateDirectory, outputFileName);
if(!File.Exists(outputFilePath)) File.WriteAllText(outputFilePath, GenerationEnvironment.ToString()); 
GenerationEnvironment.Remove(0, GenerationEnvironment.Length);
}
#>
